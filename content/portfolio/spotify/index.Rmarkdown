---
title: Spotify
author: 'Rebecca Frost-Brewer'
date: ''
slug: []
categories: []
tags: []
---


```{r load-libraries, warning=FALSE, message=FALSE}

library(tidyverse)
library(lubridate)
library(ggrepel)
library(scales)
library(hrbrthemes)
library(ggbeeswarm)

```


```{r load-all-data, warning=FALSE, message=FALSE}

# Complete data set of all the "Top 200" and "Viral 50" charts published globally
# by Spotify
charts_usa <- read_csv("data/charts_usa.csv")


```


```{r}

# All songs of 2020 that at any point were ranked in the Top 10
charts_usa_2020 <- charts_usa %>%
  drop_na(streams, rank) %>%
  mutate(ranking_date = ymd(date)) %>%
  mutate(year = year(ranking_date),
         month = month(ranking_date)) %>%
  filter(year == 2020) %>%
  filter(rank <= 10) %>%
  mutate(rank = as.factor(rank))

# Most frequent artist that appears in the Top 10 of songs of 2020
charts_usa_2020 %>%
  select(artist) %>%
  group_by(artist) %>%
  count() %>%
  arrange(desc(n)) %>%
  head(10)

# Top 10 artists based on their songs with the most number of streams
charts_usa_2020 %>%
  select(artist, streams) %>%
  group_by(artist) %>%
  summarise(streams = sum(streams)) %>%
  arrange(desc(streams))

# Top 10 artists based on how the number of times they had a song ranked #1 in streams
charts_usa_2020 %>%
  filter(rank == 1) %>%
  group_by(artist) %>%
  count() %>%
  arrange(desc(n))

```



```{r}

genre_label <- rep(c("hip hop","r&b/soul","pop","rap","trap","rap",
                               "rap","pop","rap","hip hop","hip hop","pop",
                               "pop","pop"))

top_artists <- charts_usa_2020 %>%
  drop_na(streams) %>%
  select(artist, streams) %>%
  filter(artist %in% c("Juice WRLD","The Weeknd","Taylor Swift","Ariana Grande",
                       "Lil Mosey","Pop Smoke","Lil Uzi Vert","Justin Bieber",
                       "Tory Lanez, Jack Harlow","Arizona Zervas","Roddy Ricch",
                       "Cardi B","DaBaby","DripReport","Miki Matsubara","Cookiee Kawaii",
                       "Mario Judah","Drake","Surf Mesa","24Goldn")) %>%
  group_by(artist) %>%
  summarise(ave_streams = mean(streams, na.rm = TRUE)) %>%
  arrange(ave_streams) %>%
  mutate(artist = fct_inorder(artist))
  
top_artists$genre <- c("rap","rap","pop","trap","pop","r&b/soul","rap","rap",
                       "rap","hip hop","rap","pop","pop","rap")

top_artists_2020 <- top_artists %>%
  mutate(rap_label = ifelse(genre == "rap", TRUE, FALSE))


```


```{r warning=FALSE, message=FALSE}

top_artists <- ggplot(top_artists_2020,
                      mapping = aes(x = ave_streams, y = artist, color = rap_label)) +
  geom_pointrange(aes(xmin = 0, xmax = ave_streams),
                  fatten = 3, size = 1) +
  labs(x = "Number of Streams", y = NULL,
       title = "Spotify's Most Streamed Artists of 2020",
       subtitle = "Rap dominates",
       color = "Genre") + 
  scale_x_comma(limits = c(0,1800000)) +
  scale_color_manual(values = c("#AEC7D6", "#25343D"),
                     labels = c("Other", "Rap")) +
  theme_ipsum_rc(grid = "X") +
  theme(axis.text.x = element_text(hjust=c(0, 0.5, 0.5, 0.5), color = "#1B3C65"),
        axis.text.y = element_text(size = rel(.9),lineheight = 2, color = "#1B3C65"),
        title = element_text(color = "#1B3C65"),
        plot.title.position = "plot",
        legend.position = "bottom",
        legend.text = element_text(color = "#1B3C65"))

top_artists
ggsave(top_artists, filename = "plots/top_artists.png", dpi = 300, type = "cairo",
       width = 7, height = 5, units = "in")


```


```{r warning=FALSE, message=FALSE}
# most streamed songs

song_streams <- charts_usa_2020 %>%
  select(title, streams, artist) %>%
  group_by(title, artist) %>%
  summarise(streams = sum(streams)) %>%
  arrange(desc(streams))

top_ranked_songs <- charts_usa_2020 %>%
  select(title, artist, rank) %>%
  filter(rank == 1) %>%
  group_by(title, artist) %>%
  count() %>%
  arrange(desc(n))


top10_songs <- song_streams[1:10, ]
top10_songs$number_ranked <- c(78,65,11,64,0,1,0,11,0,20)
top10_songs$song_info <- paste(top10_songs$title,"[",top10_songs$artist,"]")

top10_songs_ordered <- top10_songs %>%
  group_by(song_info) %>%
  arrange(streams) %>%
  mutate(song_info = fct_inorder(song_info))

song_labels <- c("WAP (feat. Megan Thee Stallion)\ [ Cardi B ]",
                 "Toosie Slide\ [ Drake ]",
                 "The Box\ [ Roddy Ricch ]",
                 "ROCKSTAR (feat. Roddy Ricch)\ [ DaBaby ]",
                 "Mood (feat. iann dior)\ [ 24kGoldn ]",
                 "Lemonade (feat. Gunna, Don Toliver & NAV)\ [ Internet Money ]",
                 "Laugh Now Cry Later (feat. Lil Durk)\ [ Drake ]",
                 "For The Night (feat. Lil Baby & DaBaby)\ [ Pop Smoke ]",
                 "Blueberry Faygo\ [ Lil Mosey ]",
                 "Blinding Lights\ [ The Weeknd ]")


```


```{r warning=FALSE, message=FALSE}

top_songs <- ggplot(top10_songs_ordered,
                    mapping = aes(x = streams, y = song_info)) +
  geom_pointrange(aes(xmin = 0, xmax = streams),
                  fatten = 3, size = 1, color = "#25343D") +
  labs(x = "Number of Streams", y = NULL,
       title = "Spotify's Most Streamed Songs of 2020") +
  scale_x_comma(limits = c(0,325000000)) +
  theme_ipsum_rc(grid = "X") +
  theme(axis.text.x = element_text(size = rel(.9), hjust=c(0, 0.5, 0.5, 0.5, 0.5),
                                   color = "#1B3C65"),
        axis.text.y = element_text(size = rel(.9), color = "#1B3C65"),
        plot.title.position = "plot",
        plot.title = element_text(color = "#1B3C65"),
        legend.position = "none")

top_songs
ggsave(top_songs, filename = "plots/top_songs.png", dpi = 300, type = "cairo",
       width = 9, height = 5, units = "in")


```


```{r warning=FALSE, message=FALSE}

listens <- charts_usa %>%
  select(date, streams) %>%
  drop_na(streams) %>%
  filter(date >= as.Date("2020-01-01") & date <= as.Date("2020-12-31")) %>%
  group_by(date) %>%
  summarise(total_streams = sum(streams, na.rm = TRUE))

month_names <- c("January", "February", "March", "April", "May", "June", "July",
                 "August", "September", "October", "November", "December")

listens_2020 <- listens %>%
  mutate(day = mday(date),
         month = month(date)) %>%
  mutate(month = factor(month, labels = month_names, ordered = TRUE)) %>%
  mutate(date_of_month = factor(day))


```


```{r warning=FALSE, message=FALSE}

top_listens <- ggplot(listens_2020,
                      mapping = aes(x = date_of_month, y = fct_rev(month),
                                    fill = total_streams)) +
  geom_tile() +
  scale_fill_gradient2(low = "#4191F2", mid = "white", high = "#1B3C65",
                       limits = c(61456353, 176455306), labels = comma) +
  labs(x = "Day of the month", y = NULL,
       title = "Streams per Day in 2020",
       fill = "Streams") +
  coord_equal() +
  theme_ipsum_rc(grid = "none") +
  theme(axis.text.x = element_text(size = rel(.7), color = "#1B3C65"),
        axis.text.y = element_text(size = rel(.9), color = "#1B3C65"),
        plot.title.position = "plot",
        plot.title = element_text(color = "#1B3C65"),
        legend.position = "right")

top_listens
ggsave(top_listens, filename = "plots/top_listens.png", dpi = 300, type = "cairo",
       width = 8, height = 5, units = "in")

```


```{r}
# what's going on Christmas Day?

christmas <- charts_usa %>%
  select(artist, title, date, streams) %>%
  filter(date == as.Date("2020-12-25") | date == as.Date("2019-12-25") | 
           date == as.Date("2018-12-25") | date == as.Date("2017-12-25")) %>%
  group_by(title, artist, date) %>%
  summarise(total_streams = sum(streams, na.rm = TRUE)) %>%
  filter(total_streams != 0) %>%
  arrange(desc(total_streams))

christmas <- christmas %>%
  mutate(stream_date = ymd(date)) %>%
  mutate(year = year(stream_date)) %>%
  mutate(highlight = 
           ifelse(total_streams %in% c(4091847,3851579,3639283,3489570,3118252,
                                       2847060,2772711,2646892,2607854,
                                       2561441,2540753,2405812,2388010,2346598,
                                       2311880,2285401,2247578,2214426,2189585,2142169,
                                       2091647,2075827,2071624,2051892,1984443,1960719,
                                       1939435,1906592,1898014,1839864,1807330,1775231,
                                       1765202,1755424,1751436,1713563,1711394,1700189,
                                       1700168),TRUE, FALSE))

  
  
christmas_highlight <- christmas %>%
  filter(highlight == TRUE)



christmas_by_year <- christmas %>%
  select(title, year, total_streams) %>%
  group_by(year) %>%
  summarise(year_streams = sum(total_streams),
            ave_streams = mean(total_streams)) %>%
  arrange(desc(year_streams))

year_color <- c("#7BABC9","#54758A","#2B658A","#25343D")


```



```{r}

christmas_plot <- ggplot(data = christmas,
                         mapping = aes(x = year, y = total_streams, color = as.factor(year))) +
  geom_beeswarm(size = 1, alpha = .7) +
  geom_point(data = christmas_highlight, 
             mapping = aes(x = year, y = total_streams), 
             color = "#1E792C", size = 2, shape = 17) + 
  labs(x = NULL, y = "Total Streams",
       title = "Number of Streams on Christmas",
       subtitle = "2017-2020",
       caption = "Each point represents a unique song streamed") +
  theme_ipsum_rc(grid = "Y") +
  scale_y_comma(limits = c(0,4750000)) +
  scale_color_manual(values = year_color) +
  geom_label(aes(x = 2020, y = 4250000, label = "Rockin' Around the Christmas Tree"),
             color = "#7BABC9", fontface = "bold", size = 3, hjust = 1) +
  geom_label(aes(x = 2018, y = 3250000, label = "All I Want for Christmas Is You"),
             color = "#7BABC9", fontface = "bold", size = 3) +
  annotate(geom = "segment", x = 2017, xend = 2018, y = 2075827, yend = 3000000,
           color = "#25343D") +
  annotate(geom = "segment", x = 2018, xend = 2018, y = 2388010, yend = 3000000,
           color = "#25343D") +
  annotate(geom = "segment", x = 2019, xend = 2018, y = 2405812, yend = 3000000,
           color = "#25343D") +
  theme(plot.title.position = "plot",
        plot.title = element_text(color = "#1B3C65"),
        axis.title.x = element_text(color = "#1B3C65"),
        axis.title.y = element_text(color = "#1B3C65"),
        legend.position = "none")

christmas_plot
ggsave(christmas_plot, filename = "plots/christmas_plot.png", dpi = 300, type = "cairo",
       width = 8, height = 5, units = "in")

```

